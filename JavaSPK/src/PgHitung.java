
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ADHE
 */
public class PgHitung extends javax.swing.JFrame {

    static int[][] matrikKep;
    static double[][] normalKep, terbobotKep, aPlsMns, dPlsMns, skor;
    static int[] bobot = {25, 15, 15, 20, 15, 10};
    int row, col;

    /**
     * Creates new form PgHitung
     */
    public PgHitung() {
        initComponents();
        jTable3.setAutoCreateRowSorter(true);
        jScrollPane1.setVerticalScrollBar(
            jScrollPane2.getVerticalScrollBar());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnHitung = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        btnHapus = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        ipRow = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablC1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(60),  new Integer(40),  new Integer(0),  new Integer(80),  new Integer(100),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(40),  new Integer(80),  new Integer(80),  new Integer(80)},
                { new Integer(60),  new Integer(60),  new Integer(0),  new Integer(80),  new Integer(80),  new Integer(80)},
                { new Integer(80),  new Integer(80),  new Integer(0),  new Integer(80),  new Integer(100),  new Integer(80)},
                { new Integer(80),  new Integer(60),  new Integer(0),  new Integer(80),  new Integer(100),  new Integer(100)},
                { new Integer(80),  new Integer(60),  new Integer(0),  new Integer(60),  new Integer(40),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(0),  new Integer(80),  new Integer(100),  new Integer(80)},
                { new Integer(80),  new Integer(40),  new Integer(0),  new Integer(60),  new Integer(40),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(0),  new Integer(40),  new Integer(40),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(40),  new Integer(80),  new Integer(100),  new Integer(80)},
                { new Integer(80),  new Integer(40),  new Integer(40),  new Integer(80),  new Integer(80),  new Integer(100)},
                { new Integer(80),  new Integer(60),  new Integer(0),  new Integer(60),  new Integer(80),  new Integer(0)},
                { new Integer(80),  new Integer(40),  new Integer(0),  new Integer(40),  new Integer(80),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(40),  new Integer(60),  new Integer(100),  new Integer(80)},
                { new Integer(60),  new Integer(0),  new Integer(0),  new Integer(80),  new Integer(80),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(0),  new Integer(60),  new Integer(40),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(0),  new Integer(100),  new Integer(40),  new Integer(80)},
                { new Integer(80),  new Integer(40),  new Integer(0),  new Integer(60),  new Integer(80),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(0),  new Integer(80),  new Integer(40),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(0),  new Integer(60),  new Integer(40),  new Integer(80)},
                { new Integer(80),  new Integer(40),  new Integer(0),  new Integer(60),  new Integer(80),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(0),  new Integer(60),  new Integer(40),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(40),  new Integer(60),  new Integer(100),  new Integer(80)},
                { new Integer(60),  new Integer(40),  new Integer(40),  new Integer(60),  new Integer(100),  new Integer(100)},
                { new Integer(60),  new Integer(40),  new Integer(0),  new Integer(60),  new Integer(40),  new Integer(100)}
            },
            new String [] {
                "C1", "C2", "C3", "C4", "C5", "C6"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnHitung.setText("Hitung");
        btnHitung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHitungActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1)},
                { new Integer(2)},
                { new Integer(3)},
                { new Integer(4)},
                { new Integer(5)},
                { new Integer(6)},
                { new Integer(7)},
                { new Integer(8)},
                { new Integer(9)},
                { new Integer(10)},
                { new Integer(11)},
                { new Integer(12)},
                { new Integer(13)},
                { new Integer(14)},
                { new Integer(15)},
                { new Integer(16)},
                { new Integer(17)},
                { new Integer(18)},
                { new Integer(19)},
                { new Integer(20)},
                { new Integer(21)},
                { new Integer(22)},
                { new Integer(23)},
                { new Integer(24)},
                { new Integer(25)}
            },
            new String [] {
                "Alternatif"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setEnabled(false);
        jScrollPane2.setViewportView(jTable2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Alternatif", "Skor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable3.setEnabled(false);
        jScrollPane3.setViewportView(jTable3);

        btnHapus.setText("Reset");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        tablC1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"C1"},
                {"tidak ada alda dan izin (40)"},
                {"alfa dan izin 8x (60)"},
                {"alfa dan izin 10x (80)"},
                {"alfa dan izini 12x (100)"},
                {null},
                {"C2"},
                {"kota (40)"},
                {"provinsi (60)"},
                {"hasil karya (80)"},
                {"nasional (100)"},
                {null},
                {"C3"},
                {"kota (40)"},
                {"provinsi (60)"},
                {"hasil karya (80)"},
                {"nasional (100)"},
                {null},
                {"C4"},
                {"D (40)"},
                {"C (60)"},
                {"B (80)"},
                {"A (100)"},
                {null},
                {"C5"},
                {"siswa dan rekan kerja (40)"},
                {"siswa, rekan kerja, dan wali siswa (60)"},
                {"siswa, rekan kerja dan pimpinan (80)"},
                {"siswa, wali siswa dan rekan kerja, pimpinan (100)"},
                {null},
                {"C6"},
                {"SMA (40)"},
                {"D3 (60)"},
                {"S1 (80)"},
                {"S2 (100)"}
            },
            new String [] {
                "KRITERIA"
            }
        ));
        tablC1.setEnabled(false);
        jScrollPane4.setViewportView(tablC1);

        jLabel1.setFont(new java.awt.Font("Caviar Dreams", 0, 48)); // NOI18N
        jLabel1.setText("METODE SAW DAN TOPSIS SPK");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnHapus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnHitung, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ipRow)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHitung)
                            .addComponent(ipRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHapus)
                            .addComponent(btnAdd)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void ambilDataTabel() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        row = model.getRowCount();
        col = model.getColumnCount();
        matrikKep = new int[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                matrikKep[i][j] = (Integer) model.getValueAt(i, j);
                System.out.print(matrikKep[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
        this.normalisasiKep();
    }

    public void normalisasiKep() {
        normalKep = new double[row][col];
        //cari min colom 1
        float min = 100;
        for (int j = 0; j < 1; j++) {
            for (int i = 0; i < row; i++) {
                if (matrikKep[i][j] < min) {
                    min = matrikKep[i][j];
                }
            }
        }
        //cari max colom 2-6
        float[] max = {-1, -1, -1, -1, -1};
        for (int j = 1; j < col; j++) {
            for (int i = 0; i < row; i++) {
                if (matrikKep[i][j] > max[j - 1]) {
                    max[j - 1] = matrikKep[i][j];
                }
            }
        }
//        System.out.println("min "+min);
//        for(int i=0;i<max.length;i++){
//            System.out.println("max "+i+" = "+max[i]);
//        }

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (j == 0) {
                    normalKep[i][j] = min / matrikKep[i][j];
                } else {
                    normalKep[i][j] = matrikKep[i][j] / max[j - 1];
                }
                System.out.print(normalKep[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
        this.norBobotKep();
    }

    public void norBobotKep() {
        terbobotKep = new double[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                terbobotKep[i][j] = normalKep[i][j] * bobot[j];
                System.out.print(terbobotKep[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
        this.aPaM();
    }

    public void aPaM() {
        aPlsMns = new double[2][col];
        double min1 = 100.0;
        double max1 = -1.0;
        for (int j = 0; j < 1; j++) {
            for (int i = 0; i < row; i++) {
                if (terbobotKep[i][j] < min1) {
                    min1 = terbobotKep[i][j];
                }
                if (terbobotKep[i][j] > max1) {
                    max1 = terbobotKep[i][j];
                }
            }
        }
        aPlsMns[0][0] = min1;
        aPlsMns[1][0] = max1;
        //cari max colom 2-6
        for (int j = 1; j < col; j++) {
            double min = 100.0;
            double max = -1.0;
            for (int i = 0; i < row; i++) {
                if (terbobotKep[i][j] > max) {
                    max = terbobotKep[i][j];
                }
                if (terbobotKep[i][j] < min) {
                    min = terbobotKep[i][j];
                }
            }
            aPlsMns[0][j] = max;
            aPlsMns[1][j] = min;
        }
        System.out.println();
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < col; j++) {
                System.out.print(aPlsMns[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
        this.dPdM();
    }

    public void dPdM() {
        dPlsMns = new double[row][2];
        for (int j = 0; j < 2; j++) {
            for (int i = 0; i < row; i++) {
                if (j == 0) {
                    dPlsMns[i][j] = Math.sqrt(Math.pow(aPlsMns[0][0] - terbobotKep[i][0], 2) + Math.pow(aPlsMns[0][1] - terbobotKep[i][1], 2) + Math.pow(aPlsMns[0][2] - terbobotKep[i][2], 2) + Math.pow(aPlsMns[0][3] - terbobotKep[i][3], 2) + Math.pow(aPlsMns[0][4] - terbobotKep[i][4], 2) + Math.pow(aPlsMns[0][5] - terbobotKep[i][5], 2));
                } else {
                    dPlsMns[i][j] = Math.sqrt(Math.pow(terbobotKep[i][0] - aPlsMns[1][0], 2) + Math.pow(terbobotKep[i][1] - aPlsMns[1][1], 2) + Math.pow(terbobotKep[i][2] - aPlsMns[1][2], 2) + Math.pow(terbobotKep[i][3] - aPlsMns[1][3], 2) + Math.pow(terbobotKep[i][4] - aPlsMns[1][4], 2) + Math.pow(terbobotKep[i][5] - aPlsMns[1][5], 2));
                }
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < 2; j++) {
                System.out.print(dPlsMns[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
        this.hasil();
    }

    public void hasil() {
        skor = new double[row][2];
        int nomor = 1;
        for (int i = 0; i < row; i++) {
            skor[i][0] = nomor;
            skor[i][1] = dPlsMns[i][1] / (dPlsMns[i][1] + dPlsMns[i][0]);
            nomor++;
        }

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < 2; j++) {
                System.out.print(skor[i][j] + " ");
            }
            System.out.println();
        }
        this.addTabel();
    }

    public void addTabel() {
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();

        for (int i = 0; i < skor.length; i++) {
            Double[] row = new Double[skor[i].length];

            for (int j = 0; j < skor[i].length; j++) {
                row[j] = skor[i][j];
            }

            model.addRow(row);
        }
    }
    private void btnHitungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHitungActionPerformed
        this.ambilDataTabel();
    }//GEN-LAST:event_btnHitungActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        DefaultTableModel dm = (DefaultTableModel) jTable1.getModel();
        int rowCount = dm.getRowCount();
//Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
        for (int i = 0; i < 25; i++) {
            dm.insertRow(i, new Integer[]{});
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        DefaultTableModel dm = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel dm1 = (DefaultTableModel) jTable2.getModel();
        int rowCount = dm.getRowCount();
        
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
            dm1.removeRow(i);
        }
        int x=Integer.parseInt(this.ipRow.getText());
        int bar=1;
        for (int i = 0; i < x; i++) {
            dm.insertRow(i, new Integer[]{});
            dm1.insertRow(i, new Integer[]{bar});
            bar++;
        }
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PgHitung.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PgHitung.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PgHitung.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PgHitung.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PgHitung().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnHitung;
    public static javax.swing.JTextField ipRow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable tablC1;
    // End of variables declaration//GEN-END:variables
}
